{"version":3,"sources":["components/LoginFormComponent.jsx","services/gatewayService.js","App.js","reportWebVitals.js","index.js"],"names":["LoginForm","useState","email","pwd","rememberMe","submitted","error","formData","setFormData","emailError","setEmailError","pwdError","setPwdError","validateEmail","test","toLowerCase","validatePwd","RegExp","className","noValidate","for","type","id","name","value","onChange","e","target","onBlur","checked","onClick","data","validate","axios","method","url","baseURL","password","remember","remeberMe","then","response","window","location","reload","catch","console","log","href","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7196d36.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {sendLoginData} from '../services/gatewayService';\nimport './loginform.css';\n\nfunction LoginForm(){\n    const [formData, setFormData] = useState({email: '', pwd: '', rememberMe: false, submitted: false, error: false});\n    const [emailError, setEmailError] = useState(null);\n    const [pwdError, setPwdError] = useState(null);\n\n    const validate = (formData) => {\n      if(!formData.email){\n        setEmailError('Email cannot be left empty!');\n        setFormData({...formData, error: true});\n      }else if(!validateEmail(formData.email)){\n        setEmailError('Please enter a valid email address!');\n        setFormData({...formData, error: true});\n      }else if(!formData.pwd){\n        setPwdError('Please set a secure password with alphamumeric & a special character!');\n        setFormData({...formData, error: true});\n      }else if(!validatePwd(formData.pwd)){\n        setPwdError('Please set a password with alphamumeric & a special character!');\n        setFormData({...formData, error: true});\n      }else{\n        return true;\n      }\n    }\n\n    const validateEmail = (email) => {\n        let re = /\\S+@\\S+\\.\\S+/;\n        return re.test(email.toLowerCase());\n    }\n\n    const validatePwd = (pwd) => {\n      const mediumRegex = new RegExp(\"^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})\"); \n      if(mediumRegex.test(pwd)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    const handleSubmit = () => {\n      setFormData({...formData, submitted: true});\n      if(validate(formData)){\n        sendLoginData(formData);\n      }\n    }\n\n    return (\n      <div className=\"login__form__container\">\n        <form className=\"login__form\" noValidate>\n          <h1>Sign in</h1>\n          <p>\n            <label for=\"mail\">\n              <b>Email</b>\n            </label>\n            <input \n              className={`fields ${emailError ? 'error' : ''}`} \n              type=\"email\" id=\"mail\" \n              name=\"usermail\" \n              value={formData.email} \n              onChange={(e) => setFormData({...formData, email: e.target.value})}\n              onBlur={() => setEmailError('')}\n              />\n            {formData.error && emailError && <span className=\"error__msg\">{emailError}</span>}\n          </p>\n          <p>\n            <label for=\"pwd\">\n              <b>Password</b>\n            </label>\n            <input\n              className={`fields ${pwdError ? 'error' : ''}`}\n              type=\"password\"\n              id=\"pwd\"\n              name=\"password\"\n              value={formData.pwd}\n              onChange={(e) => setFormData({...formData, pwd: e.target.value})}\n              onBlur={() => setPwdError('')}\n            />\n            {formData.error && pwdError && <span className=\"error__msg\">{pwdError}</span>}\n          </p>\n          <p>\n            <input type=\"checkbox\" id=\"rem\" name=\"rem\" value=\"rem\" checked={formData.rememberMe} onChange={() => setFormData({...formData, rememberMe: !formData.rememberMe})}/>\n            <label for=\"rem\">Remember me?</label>\n          </p>\n          <p>\n            <button type=\"button\" className=\"btn\" onClick={handleSubmit}>\n              <b>Sign in</b>\n            </button>\n          </p>\n          <section>\n              <p>\n                <a href=\"#\">Forgot your password?</a>\n              </p>\n              <p>\n                Dont have an account? <a href=\"#\">Sign up</a>\n              </p>\n              <p>\n                <a href=\"#\">Resend email confirmation</a>\n              </p>\n            </section>   \n        </form>\n      </div>\n    );\n}\n\nexport default LoginForm;","import axios from 'axios';\n\nconst sendLoginData = (data) => {\n    const baseUrl = `localhost:8000/api/`;\n      axios({\n        method:'post',\n        url:'login',\n        baseURL: `${baseUrl}`,\n        data: {\n            email: data.email,\n            password: data.pwd,\n            remember: data.remeberMe\n        }\n       })\n       .then(response => {\n          window.location.reload();\n       })\n       .catch(error => {\n            // window.location.reload();\n            console.log(error);\n       });\n};\n\nexport {sendLoginData};","import './App.css';\nimport LoginForm from './components/LoginFormComponent';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LoginForm />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}